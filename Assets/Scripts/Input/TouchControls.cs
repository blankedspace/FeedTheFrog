//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Input/TouchControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TouchControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TouchControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchControls"",
    ""maps"": [
        {
            ""name"": ""Touchs"",
            ""id"": ""e532dd3e-8ed7-49c1-bc30-944161c498eb"",
            ""actions"": [
                {
                    ""name"": ""TouchInput"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f06fbd3c-6052-4b34-b3c6-2ebbcc0596a3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPress"",
                    ""type"": ""Button"",
                    ""id"": ""4a3e6d7a-58a4-494b-967a-7977f1ba4d5c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""817b9ff6-0c97-4f93-b616-ae1905a58745"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchDrag"",
                    ""type"": ""Value"",
                    ""id"": ""c3f93458-2235-45a5-9616-4ac1f4279e62"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DragEnded"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a5e43c74-5c8f-4785-835e-074312d08b92"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1b58decf-5492-458b-9124-25ccfd8d48a6"",
                    ""path"": ""<Touchscreen>/primaryTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""89f483df-80fb-48f7-b5f2-951ddead3501"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""babcb662-4b38-4314-ba45-5b538ac2ea39"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""06320be7-9ac1-4007-ad1e-b44cd1a6984f"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchDrag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d65aa2af-9fb0-4c3d-b2e3-6bccb7df536a"",
                    ""path"": ""<Touchscreen>/primaryTouch/startPosition"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DragEnded"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Touchs
        m_Touchs = asset.FindActionMap("Touchs", throwIfNotFound: true);
        m_Touchs_TouchInput = m_Touchs.FindAction("TouchInput", throwIfNotFound: true);
        m_Touchs_TouchPress = m_Touchs.FindAction("TouchPress", throwIfNotFound: true);
        m_Touchs_TouchPosition = m_Touchs.FindAction("TouchPosition", throwIfNotFound: true);
        m_Touchs_TouchDrag = m_Touchs.FindAction("TouchDrag", throwIfNotFound: true);
        m_Touchs_DragEnded = m_Touchs.FindAction("DragEnded", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Touchs
    private readonly InputActionMap m_Touchs;
    private ITouchsActions m_TouchsActionsCallbackInterface;
    private readonly InputAction m_Touchs_TouchInput;
    private readonly InputAction m_Touchs_TouchPress;
    private readonly InputAction m_Touchs_TouchPosition;
    private readonly InputAction m_Touchs_TouchDrag;
    private readonly InputAction m_Touchs_DragEnded;
    public struct TouchsActions
    {
        private @TouchControls m_Wrapper;
        public TouchsActions(@TouchControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchInput => m_Wrapper.m_Touchs_TouchInput;
        public InputAction @TouchPress => m_Wrapper.m_Touchs_TouchPress;
        public InputAction @TouchPosition => m_Wrapper.m_Touchs_TouchPosition;
        public InputAction @TouchDrag => m_Wrapper.m_Touchs_TouchDrag;
        public InputAction @DragEnded => m_Wrapper.m_Touchs_DragEnded;
        public InputActionMap Get() { return m_Wrapper.m_Touchs; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchsActions set) { return set.Get(); }
        public void SetCallbacks(ITouchsActions instance)
        {
            if (m_Wrapper.m_TouchsActionsCallbackInterface != null)
            {
                @TouchInput.started -= m_Wrapper.m_TouchsActionsCallbackInterface.OnTouchInput;
                @TouchInput.performed -= m_Wrapper.m_TouchsActionsCallbackInterface.OnTouchInput;
                @TouchInput.canceled -= m_Wrapper.m_TouchsActionsCallbackInterface.OnTouchInput;
                @TouchPress.started -= m_Wrapper.m_TouchsActionsCallbackInterface.OnTouchPress;
                @TouchPress.performed -= m_Wrapper.m_TouchsActionsCallbackInterface.OnTouchPress;
                @TouchPress.canceled -= m_Wrapper.m_TouchsActionsCallbackInterface.OnTouchPress;
                @TouchPosition.started -= m_Wrapper.m_TouchsActionsCallbackInterface.OnTouchPosition;
                @TouchPosition.performed -= m_Wrapper.m_TouchsActionsCallbackInterface.OnTouchPosition;
                @TouchPosition.canceled -= m_Wrapper.m_TouchsActionsCallbackInterface.OnTouchPosition;
                @TouchDrag.started -= m_Wrapper.m_TouchsActionsCallbackInterface.OnTouchDrag;
                @TouchDrag.performed -= m_Wrapper.m_TouchsActionsCallbackInterface.OnTouchDrag;
                @TouchDrag.canceled -= m_Wrapper.m_TouchsActionsCallbackInterface.OnTouchDrag;
                @DragEnded.started -= m_Wrapper.m_TouchsActionsCallbackInterface.OnDragEnded;
                @DragEnded.performed -= m_Wrapper.m_TouchsActionsCallbackInterface.OnDragEnded;
                @DragEnded.canceled -= m_Wrapper.m_TouchsActionsCallbackInterface.OnDragEnded;
            }
            m_Wrapper.m_TouchsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @TouchInput.started += instance.OnTouchInput;
                @TouchInput.performed += instance.OnTouchInput;
                @TouchInput.canceled += instance.OnTouchInput;
                @TouchPress.started += instance.OnTouchPress;
                @TouchPress.performed += instance.OnTouchPress;
                @TouchPress.canceled += instance.OnTouchPress;
                @TouchPosition.started += instance.OnTouchPosition;
                @TouchPosition.performed += instance.OnTouchPosition;
                @TouchPosition.canceled += instance.OnTouchPosition;
                @TouchDrag.started += instance.OnTouchDrag;
                @TouchDrag.performed += instance.OnTouchDrag;
                @TouchDrag.canceled += instance.OnTouchDrag;
                @DragEnded.started += instance.OnDragEnded;
                @DragEnded.performed += instance.OnDragEnded;
                @DragEnded.canceled += instance.OnDragEnded;
            }
        }
    }
    public TouchsActions @Touchs => new TouchsActions(this);
    public interface ITouchsActions
    {
        void OnTouchInput(InputAction.CallbackContext context);
        void OnTouchPress(InputAction.CallbackContext context);
        void OnTouchPosition(InputAction.CallbackContext context);
        void OnTouchDrag(InputAction.CallbackContext context);
        void OnDragEnded(InputAction.CallbackContext context);
    }
}
